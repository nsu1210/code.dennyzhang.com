* Review: Dynamic Programming Problems                          :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:  dynamicprogramming, review
:END:
---------------------------------------------------------------------
Dynamic programming problems scare me A LOT. 

Yeah, it could be quite frustrating, if you haven't found the key assertions.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-dynamicprogramming"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

Dynamic Programming is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and stores the results of subproblems to avoid computing the same results again. 

The main idea behind DP is to save duplicated caculations.

Trade space for time.
---------------------------------------------------------------------

*Basic Abstractions*
| Name                                | Summary                                                   |
|-------------------------------------+-----------------------------------------------------------|
| Typical dynamicprogramming problems | [[https://code.dennyzhang.com/review-knapsack][#knapsack]], [[https://code.dennyzhang.com/followup-intervaldp][#intervaldp]], [[https://code.dennyzhang.com/followup-treedp][#treedp]], [[https://code.dennyzhang.com/review-minimax][#minimax]], [[https://code.dennyzhang.com/review-divideconquer][#divideconquer]] |
| Typical dynamicprogramming problems | [[https://code.dennyzhang.com/followup-lis][#lis]], [[https://code.dennyzhang.com/followup-lcs][#lcs]], [[https://code.dennyzhang.com/followup-coin][#coin]], [[https://code.dennyzhang.com/followup-paintfence][#paintfence]], [[https://code.dennyzhang.com/followup-frogjump][#frogjump]], [[https://code.dennyzhang.com/followup-houserobber][#houserobber]]   |
|-------------------------------------+-----------------------------------------------------------|
| *Optimal Substructure*              |                                                           |
| *DP* vs *recursive+memoization*     |                                                           |

*Top Questions*

| Num | Problem                                         | Time Complexity | Summary                                                     |
|-----+-------------------------------------------------+-----------------+-------------------------------------------------------------|
|   1 | [[https://en.wikipedia.org/wiki/Maximum_subarray_problem][Maximum subarray problem]] - [[https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm][Kadane's algorithm]]   | O(n)            | [[https://code.dennyzhang.com/maximum-subarray][LeetCode: Maximum Subarray]]                                  |
|   2 | [[https://en.wikipedia.org/wiki/Longest_increasing_subsequence][LIS - Longest increasing subsequence]]            | O(n)            | [[https://code.dennyzhang.com/longest-increasing-subsequence][LeetCode: Longest Increasing Subsequence]]                    |
|   3 | [[https://en.wikipedia.org/wiki/Longest_common_subsequence_problem][LCS - Longest Common Subsequence]]                | O(n*m)          | [[https://code.dennyzhang.com/longest-common-subsequence][LeetCode: Longest Common Subsequence]]                        |
|   4 | LPS - Longest Palindromic Subsequence           | O(n)            | [[https://code.dennyzhang.com/longest-palindromic-subsequence][LeetCode: Longest Palindromic Subsequence]]                   |
|   5 | [[https://en.wikipedia.org/wiki/Longest_palindromic_substring][Longest Palindromic Substring]]                   | O(n^2)          | [[https://code.dennyzhang.com/longest-palindromic-substring][LeetCode: Longest Palindromic Substring]]                     |
|   6 | [[https://en.wikipedia.org/wiki/Edit_distance][Edit distance of two strings]]                    | O(n^2)          | [[https://code.dennyzhang.com/edit-distance][LeetCode: Edit Distance]]                                     |
|   7 | Maximal Square                                  | O(n*m)          | [[https://code.dennyzhang.com/maximal-square][Leetcode: Maximal Square]]                                    |
|   8 | Maximum profits with certain costs              | O(n^2)          | [[https://code.dennyzhang.com/4-keys-keyboard][LeetCode: 4 Keys Keyboard]]                                   |
|   9 | Count of distinct subsequence                   | O(n)            | [[https://code.dennyzhang.com/distinct-subsequences-ii][LeetCode: Distinct Subsequences II]]                          |
|  10 | Count out of boundary paths in a 2D matrix      | O(n*m*N)        | [[https://code.dennyzhang.com/out-of-boundary-paths][LeetCode: Out of Boundary Paths]]                             |
|  11 | [[https://en.wikipedia.org/wiki/Regular_expression][Regular Expression Matching]]                     | O(n*m)          | [[https://code.dennyzhang.com/regular-expression-matching][LeetCode: Regular Expression Matching]]                       |
|  12 | Wildcard Matching                               | O(n*m)          | [[https://code.dennyzhang.com/wildcard-matching][LeetCode: Wildcard Matching]]                                 |
|  13 | Multiple choices for each step                  | O(n*m)          | [[https://code.dennyzhang.com/filling-bookcase-shelves][LeetCode: Filling Bookcase Shelves]]                          |
|  14 | Knapsack: put array to bag A, B or discard it   | O(n*s)          | [[https://code.dennyzhang.com/tallest-billboard][LeetCode: Tallest Billboard]]                                 |
|  15 | [[https://en.wikipedia.org/wiki/Knapsack_problem][Knapsack problem to maximize benefits]]           | O(n*s)          | [[https://code.dennyzhang.com/coin-change][LeetCode: Coin Change]]                                       |
|  16 | Minimum Cost to Merge Stones                    | O(n^3)          | [[https://code.dennyzhang.com/minimum-cost-to-merge-stones][LeetCode: Minimum Cost to Merge Stones]]                      |
|  17 | DP over interval: [[https://en.wikipedia.org/wiki/Minimum-weight_triangulation][Minimum-weight triangulation]]  | O(n^3)          | [[https://code.dennyzhang.com/minimum-score-triangulation-of-polygon][LeetCode: Minimum Score Triangulation of Polygon]]            |
|  18 | Burst Balloons                                  | O(n^3)          | [[https://code.dennyzhang.com/burst-balloons][LeetCode: Burst Balloons]]                                    |
|  19 | DP based on states, instead of possible actions | O(n)            | [[https://code.dennyzhang.com/best-time-to-buy-and-sell-stock-with-cooldown][LeetCode: Best Time to Buy and Sell Stock with Cooldown]]     |
|  20 | Remove Boxes                                    | O(n^4)          | [[https://code.dennyzhang.com/remove-boxes][LeetCode: Remove Boxes]]                                      |
|  21 | Largest Sum of Averages                         | O(k*n*n)        | [[https://code.dennyzhang.com/largest-sum-of-averages][LeetCode: Largest Sum of Averages]]                           |
|  22 | Uncrossed Lines                                 | O(n*m)          | [[https://code.dennyzhang.com/uncrossed-lines][LeetCode: Uncrossed Lines]]                                   |
|  23 | treedp: Binary Trees With Factors               | O(n^2)          | [[https://code.dennyzhang.com/binary-trees-with-factors][LeetCode: Binary Trees With Factors]]                         |
|  24 | DP based on values instead of positions         | O(n)            | [[https://code.dennyzhang.com/minimum-distance-to-type-a-word-using-two-fingers][LeetCode: Minimum Distance to Type a Word Using Two Fingers]] |
|  25 | Video Stitching                                 | O(n*m)          | [[https://code.dennyzhang.com/video-stitching][LeetCode: Video Stitching]]                                   |
|  26 | Maximum Profit in Job Scheduling                | O(n*log(n))     | [[https://code.dennyzhang.com/maximum-profit-in-job-scheduling][Leetcode: Maximum Profit in Job Scheduling]]                  |
|  27 | Machine state                                   | O(n)            | [[https://code.dennyzhang.com/student-attendance-record-ii][Leetcode: Student Attendance Record II]]                      |
#+TBLFM: $1=@-1$1+1;N

| Name                                                  | Example                                                                |
|-------------------------------------------------------+------------------------------------------------------------------------|
| DP needs only O(1) space                              | [[https://code.dennyzhang.com/computer-maintenance][LintCode: Computer Maintenance]]                                         |
| Some initialization can be skipped                    | [[https://code.dennyzhang.com/longest-arithmetic-subsequence-of-given-difference][LeetCode: Longest Arithmetic Subsequence of Given Difference]]           |
| Some initialization can be skipped                    | [[https://code.dennyzhang.com/bomb-enemy][LeetCode: Bomb Enemy]]                                                   |
| Instead of left-to-right, do it from right-to-left    | [[https://code.dennyzhang.com/maximum-length-of-repeated-subarray][Maximum Length of Repeated Subarray]], [[https://code.dennyzhang.com/largest-sum-of-averages][LeetCode: Largest Sum of Averages]] |
| Ugly Number II                                        | [[https://code.dennyzhang.com/ugly-number-ii][LeetCode: Ugly Number II]]                                               |
| DP based on values instead of positions               | [[https://code.dennyzhang.com/minimum-distance-to-type-a-word-using-two-fingers][LeetCode: Minimum Distance to Type a Word Using Two Fingers]]            |

[[color:#c7254e][Key Parts In DP Problems]]:
1. *Key observation* is crucial. Watch careful for how the states transit?
- Walk through with smaller cases manually. And detect the pattern.
---------------------------------------------------------------------
[[color:#c7254e][Different Types Of DP Functions]]:

- Interesting dp funcitons
  [[https://code.dennyzhang.com/domino-and-tromino-tiling][Domino and Tromino Tiling]]
   dp(i) = dp(i-1)+dp(i-2)+2*(dp(i-3)+dp(i-4)+...+dp(0))

- DP saves intermediate results, not the final ones
  [[https://code.dennyzhang.com/champagne-tower][Champagne Tower]]

- dp(i) = min(dp(i), dp[i-coin[j]]+1)
  [[https://code.dennyzhang.com/coin-change][Coin Change]]

- Function: f(i, j): [[https://code.dennyzhang.com/longest-palindromic-subsequence][Longest Palindromic Subsequence]]
- [[https://code.dennyzhang.com/coin-change-2][Coin Change 2]]

- Save the base case: [[https://code.dennyzhang.com/maximum-length-of-repeated-subarray][Maximum Length of Repeated Subarray]]

---------------------------------------------------------------------
The most impressive problems to me:
- [[https://code.dennyzhang.com/min-cost-climbing-stairs][Min Cost Climbing Stairs]]
- [[https://code.dennyzhang.com/maximum-length-of-repeated-subarray][Maximum Length of Repeated Subarray]]

---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

See all dynamicprogramming problems: [[https://code.dennyzhang.com/tag/dynamicprogramming/][#dynamicprogramming]]
[display-posts tag="dynamicprogramming" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
* https://jiayi797.github.io/2017/11/17/算法-DP/                   :noexport:
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO DP分类                                                      :noexport:
https://oi-wiki.org/dp/dag/
背包DP
区间DP
DAG 上的 DP
树形DP
状压DP
数位DP
插头DP
计数DP
动态DP
* notes                                                                   :noexport:
#+BEGIN_EXAMPLE
动态规划
动态规划（dynamic programming）多应用于子问题重叠的情况,每个子问题只求解一次.动态规划方法通常用来求解最优化问题的一个最优解.

设计动态规划方法的4个步骤:

刻画一个最优解的结构特征
递归地定义最优解的值
计算最优解的值,通常采用自底向上的方法
利用计算出的信息构造一个最优解
最优子结构（optimal substructure）
问题的最优解由相关子问题的最优解组合而成,而这些子问题可以独立求解.
#+END_EXAMPLE


* Leetcode: Container With Most Water                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     trappingrain, twopointer
:END:
---------------------------------------------------------------------
Get the most water from containers
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/container-with-most-water"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-trappingrain][Series: Trapping Rain & Follow-up]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/followup-trappingrain][#trappingrain]], [[https://code.dennyzhang.com/review-twopointer][#twopointer]]
---------------------------------------------------------------------
Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

[[image-blog:Leetcode: Container With Most Water][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/container-with-most-water/my.jpg]]

The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
 
Example:
#+BEGIN_EXAMPLE
Input: [1,8,6,2,5,4,8,3,7]
Output: 49
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/container-with-most-water][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/container-with-most-water/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Two Pointer
#+BEGIN_SRC python
## https://code.dennyzhang.com/container-with-most-water
## Basic Ideas: two pointer
##
##   Two pointer: 
##      From left to right
##      From right to left
##
##   If height[left]<height[right], move right doesn't make sense
##   Likewise for the other one
##
## Complexity: Time O(n), Space O(1)
class Solution:
    def maxArea(self, height: List[int]) -> int:
        n = len(height)
        left, right = 0, n-1
        res = 0
        while left<right:
            res = max(res, min(height[left], height[right])*(right-left))
            if height[left]<height[right]:
                left += 1
            else:
                right -= 1
        return res
#+END_SRC

- Solution: Two Pointer
#+BEGIN_SRC go
// https://code.dennyzhang.com/container-with-most-water
// Basic Ideas: Two pointer
//   Start with l, r = 0, len(l)-1
//   Then move the pointer of shorter value
//     Let's check the case that both pointers are the same the value.
//     We won't find a better solution with only one edge of left pointer or right pointer.
//     Thus we can move either pointer
// Complexity: Time O(n), Space O(1)
func maxArea(height []int) int {
    l, r := 0, len(height)-1
    res, v := 0, 0
    for l<r {
        if height[l] <= height[r] {
            v = height[l]*(r-l)
            l++
        } else {
            v = height[r]*(r-l)
            r--
        }
        if v>res { res = v }
    }
    return res
}
#+END_SRC

- Solution: Two Pointer + Pruning
#+BEGIN_SRC go
// https://code.dennyzhang.com/container-with-most-water
// Basic Ideas: Two pointer
//   Start with l, r = 0, len(l)-1
//   Then move the pointer of shorter value
//     Let's check the case that both pointers are the same the value.
//     We won't find a better solution with only one edge of left pointer or right pointer.
//     Thus we can move either pointer
// Complexity: Time O(n), Space O(1)
func maxArea(height []int) int {
    l, r := 0, len(height)-1
    res, v := 0, 0
    for l<r {
        lmax, rmax := height[l], height[r]
        if height[l] <= height[r] {
            v = height[l]*(r-l)
        } else {
            v = height[r]*(r-l)
        }
        if v>res { res = v }
        if height[l] <= height[r] {
            for l<r && height[l]<=lmax { l++ }
        } else {
            for l<r && height[r]<=rmax { r-- }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

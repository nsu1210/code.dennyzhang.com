* Leetcode: One Edit Distance                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, dynamicprogramming, editdistance
:END:
---------------------------------------------------------------------
One Edit Distance
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/one-edit-distance"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-editdistance][Series: Edit Distance Of Two Strings & Follow-up]]
- [[https://code.dennyzhang.com/edit-distance][LeetCode: Edit Distance]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/tag/editdistance][#editdistance]]
---------------------------------------------------------------------
Given two strings S and T, determine if they are both one edit distance apart.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/one-edit-distance][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/one-edit-distance/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/one-edit-distance
## Basic Ideas:
##
## Complexity: Time O(n), Space O(1)
class Solution(object):
    def isOneEditDistance(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        len_s, len_t = len(s), len(t)
        if abs(len_s - len_t) >= 2: return False
        if len_s == len_t:
            count = 0
            for i in range(len_s):
                if s[i] != t[i]: count += 1
                if count > 1: return False
            return count == 1
        else:
            # Use recursive to simplify the logic
            if len_s<len_t: return self.isOneEditDistance(t, s)
            # s is longer
            offset = 0
            for i in range(len_t):
                if s[i+offset] != t[i]:
                    if offset == 1: return False
                    offset = 1
                    # catch up check
                    if s[i+offset] != t[i]: return False
            return True
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

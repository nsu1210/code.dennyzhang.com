* Leetcode: Video Stitching                                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, [greedy, meetingconflict, frogjump, slidingwindow, classic, redo
:END:
---------------------------------------------------------------------
Video Stitching
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/video-stitching"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/review-greedy][#greedy]], [[https://code.dennyzhang.com/followup-meetingconflict][#meetingconflict]], [[https://code.dennyzhang.com/followup-frogjump][#frogjump]], [[https://code.dennyzhang.com/review-slidingwindow][#slidingwindow]]
---------------------------------------------------------------------
You are given a series of video clips from a sporting event that lasted T seconds.  These video clips can be overlapping with each other and have varied lengths.

Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1].  We can cut these clips into segments freely: for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].

Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event ([0, T]).  If the task is impossible, return -1.

Example 1:
#+BEGIN_EXAMPLE
Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
Output: 3
Explanation: 
We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: clips = [[0,1],[1,2]], T = 5
Output: -1
Explanation: 
We can't cover [0,5] with only [0,1] and [0,2].
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
Output: 3
Explanation: 
We can take clips [0,4], [4,7], and [6,9].
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: clips = [[0,4],[2,8]], T = 5
Output: 2
Explanation: 
Notice you can have extra video after the event ends.
#+END_EXAMPLE
 
Note:

1. 1 <= clips.length <= 100
- 0 <= clips[i][0], clips[i][1] <= 100
- 0 <= T <= 100

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/video-stitching][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/video-stitching/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: greedy + sliding window

#+BEGIN_SRC go
// https://code.dennyzhang.com/video-stitching
// Basic Ideas: greedy + sliding window
//
//  For any undecided position, choose the longest one
//
// Complexity: Time O(n*log(n)), Space O(1)
import "sort"
func max(x, y int) int {
    if x>y {
        return x
    } else {
        return y
    }
}

func videoStitching(clips [][]int, T int) int {
    sort.Slice(clips, func(i, j int) bool {
        return clips[i][0]<clips[j][0]
    })
    fmt.Println(clips)
    res := 0
    start, end := 0, 0
    i := 0
    for ; start<T; {
        // For point of start, check all the valid ranges
        for ; i<len(clips) && clips[i][0] <= start; i++ {
            end = max(end, clips[i][1])
        }
        // no way to cover the point of start
        if start == end {
            return -1
        }
        // Note: i won't change back
        start = end
        // start is another undecided position, so need to increase the range
        res++
    }
    return res
}
#+END_SRC

- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/video-stitching
// Basic Ideas: dynamic programming
//
//  For any undecided position, choose the longest one
//
//  dp(i, j): min count when evaluate clips[i]. And it shall covers 0-j
//  result should be dp(n, T)
//
//    // take: dp(i-1, j-clips[i])+1
//    // don't take: dp(i-1, j)
//
// Complexity: Time O(n*log(n)), Space O(n*T)
import "sort"
func videoStitching(clips [][]int, T int) int {
    sort.Slice(clips, func(i, j int) bool {
        return clips[i][0]<clips[j][0]
    })
    dp := make([][]int, len(clips)+1)
    for i, _ := range dp {
        dp[i] = make([]int, 101)
        for j, _ := range dp[i] {
            dp[i][j] = 101
        }
    }
    dp[0][0] = 0
    for i:=1; i<len(dp); i++ {
        copy(dp[i], dp[i-1])
        v := dp[i-1][clips[i-1][0]]+1
        // Check whether taking the element would be a better solution
        if v < dp[i][clips[i-1][1]] {
            for j:=clips[i-1][0]; j<=clips[i-1][1]; j++ {
                if v < dp[i][j] {
                    dp[i][j] = v
                }
            }
        }
    }
    res := dp[len(clips)][T]
    if res == 101 {
        res = -1
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

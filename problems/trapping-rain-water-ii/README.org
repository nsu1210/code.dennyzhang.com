* Leetcode: Trapping Rain Water II                               :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     trappingrain, inspiring, bfs, heap, outer2inside
:END:
---------------------------------------------------------------------
Trapping Rain Water II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/trapping-rain-water-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-trappingrain][Series: Trapping Rain & Follow-up]]
- [[https://code.dennyzhang.com/container-water][LeetCode: Trapping Rain Water]]
- [[https://code.dennyzhang.com/minimum-height-trees][LeetCode: Minimum Height Trees]]
- [[https://code.dennyzhang.com/boundary-of-binary-tree][LeetCode: Boundary of Binary Tree]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/followup-trappingrain][#trappingrain]], [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/review-heap][#heap]], [[https://code.dennyzhang.com/tag/outer2inside][#outer2inside]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]]
---------------------------------------------------------------------
Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

Example:
#+BEGIN_EXAMPLE
Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.
#+END_EXAMPLE
[[image-blog:Trapping Rain Water II][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/rainwater_empty.png]]

The above image represents the elevation map [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.
[[image-blog:Trapping Rain Water II][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/rainwater_fill.png]]

After the rain, water is trapped between the blocks. The total volume of water trapped is 4.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/trapping-rain-water-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/trapping-rain-water-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/trapping-rain-water-ii
// Basic Ideas: heap
// The lowest bucket determine how much water it can hold.
//
// Start from the outer circle into the inner circles
// We explore from the lowest blocks(use min-heap)
// If unexamined bucket is small then current lowest, current bucket can hold some water
// Otherwise current bucket can't hold water
//
// Complexity: Time ?, Space ?
import "container/heap"
// https://golang.org/pkg/container/heap/

type Item struct {
  x, y, v int
}

// A PriorityQueue implements heap.Interface and holds Items.
type PriorityQueue []*Item

func (pq PriorityQueue) Len() int { return len(pq) }

func (pq PriorityQueue) Less(i, j int) bool {
	// We want Pop to give us the highest, not lowest, priority so we use greater than here.
	return pq[i].v < pq[j].v
}

func (pq PriorityQueue) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
}

func (pq *PriorityQueue) Push(x interface{}) {
	item := x.(*Item)
	*pq = append(*pq, item)
}

func (pq *PriorityQueue) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	*pq = old[0 : n-1]
	return item
}

func trapRainWater(heightMap [][]int) int {
    if len(heightMap) == 0 { return 0 }

    visited := map[string]bool{}
    h := make(PriorityQueue, 0)
	heap.Init(&h)
    // add outer bounders to min-heap
    for _, i := range []int{0, len(heightMap)-1} {
        for j := 0; j < len(heightMap[0]); j++ {
            heap.Push(&h, &Item{i, j, heightMap[i][j]})
            visited[fmt.Sprintf("%d-%d", i, j)] = true
        }
    }
    for i:=1; i<len(heightMap)-1; i++ {
        for _, j:= range []int{0, len(heightMap[0])-1} {
            heap.Push(&h, &Item{i, j, heightMap[i][j]})
            visited[fmt.Sprintf("%d-%d", i, j)] = true
        }
    }

    res := 0
    x, y := 0, 0
    key := ""
    for h.Len() != 0 {
        item := heap.Pop(&h).(*Item)
        // fmt.Println("item: ", item)
        for _, offset := range [][]int{[]int{0, 1}, []int{0, -1}, []int{1, 0}, []int{-1, 0}} {
            x, y = item.x+offset[0], item.y+offset[1]
            if x<0 || x>=len(heightMap) || y<0 || y>=len(heightMap[0]) {
                continue
            }
            key = fmt.Sprintf("%d-%d", x, y)
            if visited[key] { continue }
            visited[key] = true
            if heightMap[x][y] < item.v {
                // fmt.Println(item.x, item.y, item.v, "|", x, y, item.v - heightMap[x][y])
                res += item.v - heightMap[x][y]
                heap.Push(&h, &Item{x, y, item.v})
            } else {
                heap.Push(&h, &Item{x, y, heightMap[x][y]})
            }                                
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

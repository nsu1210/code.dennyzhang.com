* Leetcode: Partition Labels                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     greedy, twopointer
:END:
---------------------------------------------------------------------
Partition Labels
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/shortest-path-in-a-grid-with-obstacles-elimination"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-greedy][#greedy]], [[https://code.dennyzhang.com/review-twopointer][#twopointer]]
---------------------------------------------------------------------
A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.
#+BEGIN_EXAMPLE
Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
#+END_EXAMPLE

Note:
- S will have length in range [1, 500].
- S will consist of lowercase letters ('a' to 'z') only.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-labels][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/partition-labels/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: greedy + two pointer
#+BEGIN_SRC go
// https://code.dennyzhang.com/partition-labels
// Basic Ideas: two pointer + greedy
// Complexity: Time O(n), Space O(1)
func max(x, y int) int {
    if x>y {
        return x
    } else {
        return y
    }
}

func partitionLabels(S string) []int {
    chars := make([]int, 26)
    for i:=len(S)-1; i>=0; i-- {
        index := int(S[i]-'a')
        chars[index] = max(i, chars[index])
    }

    res := []int{}
    prev := -1
    for i:=0; i<len(S); {
        index := int(S[i]-'a')
        j := chars[index]
        // S[i...j]
        for k:=i+1; k<=j; k++ {
            index2 := int(S[k]-'a')
            j = max(j, chars[index2])
        }
        i = j+1

        if prev == -1 {
            res = append(res, i)
        } else {
            res = append(res, i-prev)
        }
        prev = i
    }
    return res
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/partition-labels
## Basic Ideas:
##       letter_dict:
##             a -> max 20
##             b -> max 30
## Complexity:
class Solution(object):
    def partitionLabels(self, S):
        """
        :type S: str
        :rtype: List[int]
        """
        letter_dict = {}
        for ch in map(chr, range(ord('a'), ord('z')+1)):
            letter_dict[ch] = -1

        length = len(S)
        for i in xrange(length):
            ch = S[i]
            if i > letter_dict[ch]:
                letter_dict[ch] = i

        res = []
        i = 0
        print letter_dict
        while i < length:
            ch = S[i]
            # print("ch: %s" % (ch))
            previous_index = i
            max_index = letter_dict[ch]
            while max_index > previous_index:
                v = max_index
                for k in range(previous_index, max_index):
                    index = letter_dict[S[k]]
                    max_index = max(max_index, index)
                previous_index = v

            res.append(max_index - i + 1)
            # print("s: %s" % (S[i:max_index+1]))
            i = max_index + 1
        return res

# s = Solution()
# # print s.partitionLabels("eaaaabaaec")
# print s.partitionLabels("ababcbacadefegdehijhklij") # [9, 7, 8]
# print s.partitionLabels("qiejxqfnqceocmy") # [13, 1, 1]
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

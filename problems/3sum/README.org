* Leetcode: 3Sum                                                :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, twosum
:END:
---------------------------------------------------------------------
3Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/3sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-twosum][Series: TwoSum Problems & Follow-Up]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-twopointer][#twopointer]], [[https://code.dennyzhang.com/followup-twosum][#twosum]]
---------------------------------------------------------------------
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.
#+BEGIN_EXAMPLE
For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/3sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/3sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: two pointer
#+BEGIN_SRC go
// https://code.dennyzhang.com/3sum
// Basic Ideas: two pointer
//
// Notice: how to avoid duplicates?
// Notice: how to move two pointers, when found a match
//
// Complexity: Time O(n*n), Space O(1)
import "sort"
func threeSum(nums []int) [][]int {
    sort.Ints(nums)
    res := [][]int{}
    for i:=0; i+2<len(nums); i++ {
        // skip for the same
        if i>0 && nums[i] == nums[i-1] {
            continue
        }
        // nums[i+1...N-1] find a pair of given target
        target := -nums[i]
        left, right := i+1, len(nums)-1
        for left<right {
            if nums[left]+nums[right] == target {
                res = append(res, []int{nums[i], nums[left], nums[right]})
                // move for the same values
                for left+1<len(nums) && nums[left+1] == nums[left] {
                    left++
                }
                for right-1>=0 && nums[right-1] == nums[right] {
                    right--
                }
                // for equal
                left++
                right--
            } else {
                if nums[left]+nums[right] > target {
                    // make it smaller
                    right--
                } else {
                    left++
                }
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/3sum
## Basic Ideas: sort the list, then loop with idea of 2 sum
##       What if you have duplicate entries?
##       [0, 0, 0, 0]
## Complexity: Time O(n^2), Space O(1)
## Sample Data:
##      -4 -1 -1 0 1 2
##       i l         r
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        ret = []
        nums.sort()

        for i in xrange(len(nums)-2):
            if i>0 and nums[i] == nums[i-1]:
                continue
            l,r = i+1, len(nums)-1
            while l<r:
                val = nums[i] + nums[l] + nums[r]
                if val >0:
                    r -= 1
                elif val < 0:
                    l += 1
                else:
                    ret.append([nums[i], nums[l], nums[r]])
                    while l<r and nums[l] == nums[l+1]:
                        l += 1
                    while l<r and nums[r] == nums[r-1]:
                        r -= 1
                    l += 1; r -=1
        return ret
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

* Leetcode: Valid Triangle Number                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, twosum, triangle
:END:
---------------------------------------------------------------------
Pic 3 numbers to get a triangle
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/valid-triangle-number"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-twosum][Series: TwoSum Problems & Follow-Up]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/followup-twosum][#twosum]], [[https://code.dennyzhang.com/review-twopointer][#wopointer]], [[https://code.dennyzhang.com/followup-triangle][#triangle]]
---------------------------------------------------------------------
Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

Example 1:
#+BEGIN_EXAMPLE
Input: [2,2,3,4]
Output: 3

Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
#+END_EXAMPLE

Note:
1. The length of the given array won't exceed 1000.
- The integers in the given array are in the range of [0, 1000].

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/valid-triangle-number][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/valid-triangle-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/valid-triangle-number
## Basic Ideas: Like 3sum
##       Sort the list, then use 3 loop
##       When the sum 2 shorter sides is greater 
##       than the big side, the 3 numbers can form a triangle.
##       Note: not O(n*n*n); numbers has 0; allow duplicate
##
## Complexity: Time O(n^2), Space O(1)
## Sample Data:
##     3, 5, 6, 7, 7, 8
##     i  j        k
##     2  2  3  4
##     0  0  1  1
class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        res = 0
        for i in range(0, len(nums)-2):
            if nums[i] == 0:
                continue
            count = 0
            k = i + 2
            for j in range(i+1, len(nums)-1):
                # k never need to move back

                # calculate current round of matches based on last round
                if (j>i+1) and (nums[i]+nums[j]>nums[k-1]):
                    count -= 1

                while k<len(nums) and nums[i]+nums[j]>nums[k]:
                    count += 1
                    k += 1
                res += count
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

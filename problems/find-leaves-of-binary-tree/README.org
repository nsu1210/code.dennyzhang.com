* Leetcode: Find Leaves of Binary Tree                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, inspiring
:END:
---------------------------------------------------------------------
Find Leaves of Binary Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-leaves-of-binary-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/binary-tree-vertical-order-traversal][Binary Tree Vertical Order Traversal]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]]
---------------------------------------------------------------------
Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

Example:
#+BEGIN_EXAMPLE
Given binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Returns [4, 5, 3], [2], [1].
#+END_EXAMPLE

Explanation:
#+BEGIN_EXAMPLE
1. Removing the leaves [4, 5, 3] would result in this tree:
          1
         / 
        2          
#+END_EXAMPLE

#+BEGIN_EXAMPLE
2. Now removing the leaf [2] would result in this tree:
          1  
#+END_EXAMPLE

#+BEGIN_EXAMPLE
3. Now removing the leaf [1] would result in the empty tree:
          []         
Returns [4, 5, 3], [2], [1].
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-leaves-of-binary-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-leaves-of-binary-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: DFS
#+BEGIN_SRC python
## https://code.dennyzhang.com/find-leaves-of-binary-tree
## Basic Ideas: DFS + hashmap
##
##   For each node, find its level
##   hashmap: level -> nodes
##
## Complexity: Time O(n), Space O(n)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def findLeaves(self, root: TreeNode) -> List[List[int]]:
        m = collections.defaultdict(list)
        def dfs(root):
            nonlocal m
            if not root: return 0
            levelL = dfs(root.left)
            levelR = dfs(root.right)
            level = max(levelL, levelR)+1
            m[level].append(root.val)
            return level
        maxLevel = dfs(root)
        return [m[i+1] for i in range(maxLevel)]
#+END_SRC

- Solution: BFS
#+BEGIN_SRC python
## https://code.dennyzhang.com/find-leaves-of-binary-tree
## Basic Ideas: hashmap + post-order + reversed BFS
##
##  Children find out parent
##
##  Reversed BFS
##   1. Use post-order to initialize queue
##   2. Visit current layer in the queue
##      Decrease the child count of the parent node by 1
##      If the child count of parent node is 0, 
##          put them into the queue as the next layer
##
## Complexity: Time O(n), Space O(n)
##
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def findLeaves(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        import collections
        d = collections.defaultdict(lambda:[0, None])
        queue = collections.deque()
        def helper(node):
            if node is None: return
            child_count = 0
            if node.left:
                child_count +=1
                d[node.left][1] = node
                helper(node.left)
            if node.right:
                child_count += 1
                d[node.right][1] = node
                helper(node.right)
            d[node][0] = child_count
            if child_count == 0:
                queue.append(node)

        # initialize queue and dictionary
        helper(root)
        res = []
        # reversed BFS
        while len(queue) != 0:
            nodes = []
            for k in range(len(queue)):
                node = queue.popleft()
                nodes.append(node.val)
                parent = d[node][1]
                d[parent][0] -= 1
                # Identity the next candidates
                if d[parent][0] == 0: queue.append(parent)
            res.append(nodes)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML

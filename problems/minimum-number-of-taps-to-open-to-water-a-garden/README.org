* Leetcode: Minimum Number of Taps to Open to Water a Garden    :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, greedy, slidingwindow, frogjump
:END:
---------------------------------------------------------------------
Minimum Number of Taps to Open to Water a Garden
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-number-of-taps-to-open-to-water-a-garden"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/review-greedy][#greedy]], [[https://code.dennyzhang.com/followup-frogjump][#frogjump]], [[https://code.dennyzhang.com/review-slidingwindow][#slidingwindow]]
---------------------------------------------------------------------
There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).

There are n + 1 taps located at points [0, 1, ..., n] in the garden.

Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.

[[image-blog:Leetcode: Minimum Number of Taps to Open to Water a Garden][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/minimum-number-of-taps-to-open-to-water-a-garden/1.png]]
Example 1:
#+BEGIN_EXAMPLE
Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: n = 7, ranges = [1,2,1,0,2,1,0,1]
Output: 3
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4]
Output: 2
#+END_EXAMPLE

Example 5:
#+BEGIN_EXAMPLE
Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4]
Output: 1
#+END_EXAMPLE
 
Constraints:

- 1 <= n <= 10^4
- ranges.length == n + 1
- 0 <= ranges[i] <= 100

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-number-of-taps-to-open-to-water-a-garden][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-number-of-taps-to-open-to-water-a-garden
// Basic Ideas: greedy + sliding window
//
//   Determine from left to right for each position
//   For the available range, choose the biggest ending point. (Greedy)
//   When evaluating ranges, no need to go back
//
// Complexity: Time O(n*log(n)), Space O(n)
func max(x, y int) int {
    if x>y {
        return x
    } else {
        return y
    }
}

func min(x, y int) int {
    if x<y {
        return x
    } else {
        return y
    }
}

func minTaps(n int, ranges []int) int {
    nums := make([][]int, len(ranges))
    for i, _ := range nums {
        nums[i] = []int{max(0, i-ranges[i]), min(i+ranges[i], n)}
    }
    sort.Slice(nums, func(i, j int) bool {
        return nums[i][0]<nums[j][0]
    })
    fmt.Println(nums)
    res := 0
    start, end := 0, 0
    i := 0
    for ; start<n; {
        for ; i<len(nums) && nums[i][0]<=start; i++ {
            end = max(end, nums[i][1])
        }
        // Can't cover start point
        if start == end {
            return -1
        }
        // explore the new point
        start = end
        res ++
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
